
class Array

def quick_sort(left=0, right=length-1)

  return self if length <= 1

    base = self[left] if base.nil?
    search_big, search_small = left + 1, right

    while search_big < search_small

        if self[search_big] < self[left] && search_big < right
            search_big += 1
        end

        if self[search_small] >= self[left] && search_small > left
            search_small -= 1
        end

        if search_big < search_small
            # p "Left:#{search_big} is greater(#{[search_big]}) than base Right:#{search_small} => #{[search_small]}"
            replace = self[search_big]
            self[search_big], self[search_small] = self[search_small], replace
        end

    end

    if (right - left != 1) || self[left] > self[search_small]
        replace = self[left]
        self[left], self[search_small] = self[search_small], replace
    end

    if left < search_small - 1
        quick_sort(left, search_small - 1)
    end

    if search_small + 1 < right
        quick_sort(search_small + 1, right)
    end

    self
end

def bubble_sort

    head, tail = 1, self.size - 1
    target = tail
    tmp, increment = nil, 0

    while head < tail

        until target < head

            if self[target] < self[target - 1]
                tmp = self[target]
                self[target], self[target - 1] = self[target - 1], tmp
            end

            unless target == head
                target -= 1
            else
                head += 1
                break
            end
        end
        target = tail
        increment += 1
    end

    self
end

# 挿入ソート：単純挿入法
def insert_sort

    # ソート済みインデックス
    sorted_end = 0
    candidate_value = nil

    while sorted_end < self.length - 1
        # 入れ替え候補
        candidate_value = self[sorted_end + 1]
        # 配列を右から左へ捜査する
        count = sorted_end

        # self[count] > candidate_value : 一つずらす、位置入替
        # self[count] < candidate_value : 位置確定=>処理終了
        while count >= 0
            if self[count] < candidate_value
                break
            else
                self[count + 1], self[count] = self[count], candidate_value
            end
            count -= 1
        end

        # 確定済み範囲を広げる
        sorted_end += 1
    end
    self
end

def shell_sort

    # ソート間隔用の配列を作成
    # ステップ：3 x n + 1
    sort_skip = Array.new
    0.upto(self.length / 2) do |i|
        sort_skip << begin
            3 * sort_skip[i - 1] + 1
        rescue
            # 1をデフォルトで設定する
            1
        end
    end

    # 抽出ステップ幅の値の配列:実行順にする
    # sample : [4, 2, 1]
    sort_skip.delete_if{|val| val > self.length }.reverse!


    # ソート処理
    sort_skip.each do |step_range|

        # ステップ幅のグループ分け
        step_range.times do |group_num|

            # 処理グループを格納しておく配列
            # ステップ分グループが必要になる
            grp = []

            # 抽出基点を設定
            target_index = group_num

            self.each_index do |index|

                if index == target_index
                    grp << self[index]
                    # p "inserted val is #{self[index]}"
                    target_index += step_range
                end

            end

            # この段階で挿入ソートする
            grp.insert_sort

            # ソートした値適応して元の配列にソートした状態でもどす
            grp.each_index do |val_in_group|
                insert_target_index = (step_range * val_in_group) + group_num
                # p insert_target_index
                self[insert_target_index] = grp[val_in_group]
            end
        end
    end

    self
end



def select_sort

    current = self.length - 1

    while current > 0
        # max値を範囲指定した中で選ぶ
        range_splited = self[0, current + 1]
        switch_tmp = self[current]
        # 入換え処理
        self[current] = self[index(range_splited.max)]
        self[index(range_splited.max)] = switch_tmp
        current -= 1
    end

    self
end

end


# arr = [5, 4, 7, 6, 8, 3, 1, 2, 9]
# arr = [10, 5, 4, 7, 20, 6, 8, 3, 1, 2, 9, 12, 10]
# arr = [5, 3, 4, 1, 2]
arr = [354, 585, 686, 719, 40, 83, 699, 320, 166, 612, 956, 960, 547, 44, 660, 282, 935, 122, 514, 931, 596, 497, 322, 543, 272, 242, 10, 265, 46, 669, 105, 962, 153, 152, 52, 821, 16, 176, 403, 978, 3, 190, 595, 723, 616, 991, 356, 650, 258, 420, 108, 57, 764, 841, 249, 466, 892, 398, 870, 95, 875, 882, 544, 625, 94, 824, 894, 333, 248, 936, 324, 615, 266, 545, 858, 161, 131, 278, 535, 479, 269, 323, 435, 344, 87, 759, 443, 652, 338, 607, 804, 604, 989, 200, 431, 60, 582, 853, 969, 31, 464, 334, 17, 878, 785, 372, 195, 767, 168, 405, 273, 213, 953, 996, 417, 149, 493, 42, 78, 561, 823, 530, 519, 214, 752, 394, 602, 124, 193, 972, 439, 300, 107, 584, 815, 164, 746, 202, 79, 145, 937, 995, 199, 183, 594, 985, 934, 307, 908, 509, 25, 117, 115, 546, 745, 617, 691, 733, 281, 755, 923, 432, 446, 433, 384, 6, 297, 571, 353, 59, 917, 408, 290, 264, 526, 455, 67, 365, 55, 188, 132, 787, 762, 929, 591, 419, 185, 388, 512, 226, 954, 559, 605, 654, 640, 597, 675, 411, 410, 454, 868, 287, 186, 250, 210, 701, 872, 379, 750, 64, 209, 313, 82, 224, 578, 143, 212, 241, 421, 424, 551, 904, 541, 994, 373, 651, 503, 573, 406, 8, 523, 696, 792, 818, 947, 104, 469, 738, 335, 65, 862, 125, 296, 165, 229, 860, 938, 756, 362, 881, 838, 844, 369, 657, 580, 884, 72, 196, 274, 106, 957, 670, 33, 948, 782, 321, 921, 850, 135, 451, 664, 548, 566, 867, 139, 649, 515, 401, 633, 194, 534, 864, 81, 754, 231, 159, 434, 174, 809, 825, 463, 327, 154, 770, 1000, 359, 306, 32, 490, 873, 472, 638, 796, 98, 366, 470, 225, 237, 475, 520, 598, 942, 364, 119, 121, 964, 476, 653, 771, 949, 635, 705, 292, 243, 399, 682, 409, 621, 447, 381, 620, 663, 416, 85, 630, 562, 29, 601, 632, 467, 150, 855, 223, 641, 916, 517, 415, 886, 390, 191, 477, 871, 564, 906, 62, 720, 611, 565, 816, 843, 739, 830, 726, 779, 977, 449, 973, 865, 12, 263, 351, 116, 735, 840, 529, 715, 1, 714, 944, 285, 631, 834, 279, 713, 315, 114, 53, 786, 863, 748, 655, 744, 846, 499, 505, 402, 180, 673, 39, 819, 66, 912, 827, 516, 386, 393, 760, 301, 689, 491, 557, 488, 950, 998, 456, 845, 97, 570, 961, 967, 751, 522, 712, 240, 302, 336, 197, 453, 737, 976, 656, 507, 189, 708, 924, 234, 305, 832, 930, 440, 69, 988, 208, 123, 772, 687, 727, 586, 93, 58, 510, 397, 742, 215, 662, 866, 157, 267, 429, 47, 812, 525, 504, 473, 88, 259, 71, 778, 254, 308, 839, 256, 318, 486, 692, 987, 603, 731, 48, 91, 271, 613, 939, 23, 810, 951, 902, 129, 568, 629, 329, 84, 666, 207, 538, 856, 619, 592, 808, 137, 151, 984, 820, 893, 539, 239, 540, 76, 20, 128, 68, 790, 347, 702, 181, 89, 389, 481, 350, 891, 412, 407, 955, 450, 718, 717, 577, 96, 749, 608, 343, 126, 800, 146, 502, 711, 134, 118, 496, 968, 724, 550, 228, 648, 721, 99, 158, 109, 211, 795, 448, 484, 438, 623, 807, 284, 728, 567, 363, 579, 925, 920, 461, 697, 203, 553, 743, 459, 986, 247, 555, 387, 100, 703, 888, 480, 963, 788, 9, 230, 847, 276, 498, 45, 30, 928, 992, 160, 575, 61, 511, 851, 15, 901, 667, 170, 829, 380, 877, 182, 261, 192, 817, 693, 26, 255, 41, 926, 332, 775, 352, 741, 606, 441, 326, 970, 757, 368, 869, 574, 849, 506, 317, 828, 92, 148, 685, 5, 489, 975, 958, 371, 80, 599, 280, 554, 542, 990, 198, 999, 532, 636, 51, 777, 303, 24, 286, 360, 34, 801, 683, 110, 589, 644, 661, 270, 913, 383, 802, 966, 50, 690, 842, 560, 437, 793, 348, 217, 288, 783, 813, 483, 298, 898, 879, 614, 144, 563, 428, 309, 874, 549, 426, 452, 90, 707, 694, 49, 219, 312, 310, 156, 319, 639, 244, 665, 111, 328, 918, 11, 133, 395, 671, 28, 175, 294, 911, 283, 952, 178, 167, 331, 112, 761, 932, 773, 392, 528, 729, 626, 518, 610, 377, 316, 831, 468, 678, 552, 642, 102, 201, 27, 806, 56, 679, 101, 177, 900, 730, 993, 524, 910, 940, 747, 471, 355, 965, 890, 220, 677, 789, 835, 304, 346, 889, 915, 527, 404, 700, 736, 374, 946, 798, 2, 876, 238, 291, 791, 914, 797, 880, 482, 572, 337, 766, 826, 4, 268, 680, 776, 959, 120, 643, 13, 645, 983, 811, 637, 86, 14, 382, 848, 495, 478, 500, 169, 852, 780, 147, 593, 385, 277, 43, 37, 413, 716, 725, 537, 508, 583, 997, 672, 909, 581, 458, 833, 54, 423, 734, 857, 646, 391, 905, 163, 22, 444, 883, 457, 521, 127, 339, 113, 600, 295, 430, 236, 732, 275, 442, 492, 622, 698, 221, 485, 706, 805, 627, 130, 345, 357, 624, 140, 513, 427, 896, 688, 465, 73, 222, 340, 370, 681, 814, 233, 246, 341, 919, 19, 982, 179, 895, 933, 445, 375, 859, 216, 837, 556, 609, 590, 501, 943, 7, 903, 765, 899, 155, 887, 227, 36, 758, 299, 740, 232, 251, 35, 533, 396, 172, 576, 768, 558, 941, 709, 205, 634, 695, 769, 922, 684, 342, 794, 173, 774, 378, 753, 75, 854, 171, 262, 235, 971, 142, 289, 206, 70, 722, 260, 927, 425, 784, 531, 710, 361, 436, 474, 184, 668, 885, 77, 907, 460, 218, 349, 314, 18, 187, 658, 414, 536, 569, 252, 136, 162, 245, 628, 253, 293, 257, 704, 647, 138, 979, 418, 422, 861, 763, 311, 367, 822, 400, 588, 945, 587, 659, 103, 325, 74, 781, 38, 836, 980, 674, 487, 462, 981, 63, 799, 21, 676, 204, 494, 974, 897, 803, 141, 330, 618, 376, 358]

# p arr.quick_sort
p arr.shell_sort
# p arr
# p arr.select_sort
# p arr.insert_sort
# p arr.bubble_sort
# p arr.sort
